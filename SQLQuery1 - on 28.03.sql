USE movies

SELECT MOVIE.TITLE, MOVIE.YEAR, MOVIE.LENGTH
FROM MOVIE
WHERE (LENGTH > 120 OR LENGTH IS NULL) AND MOVIE.YEAR < 2000

SELECT MOVIESTAR.NAME, MOVIESTAR.GENDER
FROM MOVIESTAR
WHERE MOVIESTAR.NAME LIKE 'J%' AND YEAR(MOVIESTAR.BIRTHDATE) > 1948
ORDER BY MOVIESTAR.NAME DESC

SELECT STUDIONAME, COUNT(DISTINCT STARNAME) AS num_actors
FROM MOVIE JOIN STARSIN ON TITLE=MOVIETITLE AND YEAR = MOVIEYEAR
GROUP BY STUDIONAME

SELECT MOVIESTAR.NAME, COUNT (MOVIETITLE) AS num_movies
FROM MOVIESTAR JOIN STARSIN ON MOVIESTAR.NAME = STARSIN.STARNAME
GROUP BY MOVIESTAR.NAME


SELECT STUDIONAME, TITLE, YEAR
FROM MOVIE
WHERE YEAR IN (SELECT MAX(YEAR) FROM MOVIE GROUP BY STUDIONAME)
ORDER BY STUDIONAME DESC


SELECT TOP 1 MOVIESTAR.NAME
FROM MOVIESTAR
WHERE GENDER = 'M'
ORDER BY BIRTHDATE DESC


-- 7th crack
SELECT TOP 2 STARNAME, STUDIONAME, COUNT(DISTINCT MOVIETITLE) AS num_movies
FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = MOVIETITLE AND MOVIE.YEAR = MOVIEYEAR
GROUP BY STARNAME, STUDIONAME
ORDER BY num_movies DESC
--end crack
--7th another crack
SELECT DISTINCT MOVIE.STUDIONAME, T1.STARNAME, MAX(num_movies) as m_movies
FROM MOVIE JOIN (SELECT STUDIONAME, STARNAME, COUNT(DISTINCT MOVIETITLE) AS num_movies
               FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = MOVIETITLE AND MOVIE.YEAR = MOVIEYEAR
               GROUP BY STARNAME, STUDIONAME) AS T1 ON MOVIE.STUDIONAME = T1.STUDIONAME
WHERE T1.num_movies = (SELECT TOP 1 COUNT(DISTINCT MOVIETITLE) AS num_movies
               FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = MOVIETITLE AND MOVIE.YEAR = MOVIEYEAR
               GROUP BY STARNAME, STUDIONAME
			   ORDER BY num_movies DESC)
GROUP BY T1.STARNAME, MOVIE.STUDIONAME
--end another crack

SELECT STUDIONAME, STARNAME, COUNT(STARNAME) AS num_movies
FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = MOVIETITLE AND MOVIE.YEAR = MOVIEYEAR
GROUP BY STUDIONAME, STARNAME
HAVING COUNT (MOVIETITLE) >= ALL (SELECT COUNT(MOVIETITLE)
                                  FROM MOVIE JOIN STARSIN ON MOVIE.TITLE = MOVIETITLE AND MOVIE.YEAR = MOVIEYEAR
								  GROUP BY STUDIONAME, STARNAME)



SELECT MOVIE.TITLE, YEAR, T1.actors
FROM MOVIE JOIN (SELECT TITLE, COUNT(DISTINCT STARNAME) AS actors
                 FROM MOVIE JOIN STARSIN ON TITLE = MOVIETITLE AND YEAR = MOVIEYEAR
                 GROUP BY TITLE
                 HAVING COUNT( DISTINCT STARNAME) > 2) AS T1 ON MOVIE.TITLE = T1.TITLE



USE ships
SELECT DISTINCT SHIPS.NAME
FROM SHIPS JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
WHERE SHIPS.NAME LIKE 'C%' OR SHIPS.NAME LIKE 'K%'
GROUP BY SHIPS.NAME
HAVING COUNT(OUTCOMES.SHIP) >= 1

SELECT DISTINCT T1.NAME, CLASSES.COUNTRY
FROM CLASSES JOIN (SELECT SHIPS.NAME, SHIPS.CLASS
                   FROM SHIPS LEFT JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP
				   WHERE SHIPS.NAME NOT IN (SELECT OUTCOMES.SHIP FROM OUTCOMES WHERE OUTCOMES.RESULT = 'sunk')
				   ) AS T1 ON CLASSES.CLASS = T1.CLASS;


SELECT CLASSES.COUNTRY, COUNT (OUTCOMES.SHIP) AS num_sunk
FROM CLASSES LEFT JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS LEFT JOIN OUTCOMES ON SHIPS.NAME = OUTCOMES.SHIP AND OUTCOMES.RESULT = 'sunk'
GROUP BY CLASSES.COUNTRY;

SELECT BATTLES.NAME
FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE
GROUP BY BATTLES.NAME
HAVING COUNT(DISTINCT OUTCOMES.SHIP) > (SELECT COUNT(OUTCOMES.SHIP) FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE WHERE BATTLES.NAME = 'Guadalcanal')



SELECT BATTLES.NAME
FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE
GROUP BY BATTLES.NAME
HAVING COUNT(DISTINCT OUTCOMES.SHIP) > (SELECT COUNT(OUTCOMES.SHIP) FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE WHERE BATTLES.NAME = 'Surigao Strait')

--6TH 
SELECT SHIPS.NAME, CLASSES.DISPLACEMENT, CLASSES.NUMGUNS
FROM CLASSES JOIN SHIPS ON CLASSES.CLASS = SHIPS.CLASS
WHERE CLASSES.DISPLACEMENT = (SELECT TOP 1 DISPLACEMENT FROM CLASSES ORDER BY DISPLACEMENT ASC) AND CLASSES.NUMGUNS >= (SELECT MAX(C1.NUMGUNS) FROM CLASSES AS C1 WHERE c1.DISPLACEMENT = CLASSES.DISPLACEMENT)
ORDER BY CLASSES.NUMGUNS

--END OF 6TH

--7th

SELECT COUNT(O1.SHIP) AS num_ships
FROM OUTCOMES AS O1 JOIN BATTLES AS B1 ON O1.BATTLE = B1.NAME JOIN OUTCOMES AS O2 ON O2.RESULT = 'ok' JOIN BATTLES AS B2 ON B1.DATE < B2.DATE AND O2.BATTLE = B2.NAME
WHERE O1.RESULT = 'damaged' AND O1.SHIP = O2.SHIP


SELECT O1.SHIP
FROM OUTCOMES AS O1 JOIN BATTLES AS B1 ON O1.BATTLE = B1.NAME JOIN OUTCOMES AS O2 ON O2.RESULT = 'ok' JOIN BATTLES AS B2 ON B1.DATE < B2.DATE AND O2.BATTLE = B2.NAME
WHERE O1.RESULT = 'damaged' AND O1.SHIP = O2.SHIP AND ((SELECT COUNT(OUTCOMES.SHIP) FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE WHERE BATTLES.NAME = B1.NAME) < (SELECT COUNT(OUTCOMES.SHIP) FROM BATTLES JOIN OUTCOMES ON BATTLES.NAME = OUTCOMES.BATTLE WHERE BATTLES.NAME = B2.NAME))



USE PC
SELECT DISTINCT L1.model, L1.code, L1.SCREEN
FROM LAPTOP AS L1 JOIN LAPTOP AS L2 ON L1.model = L2.model
WHERE (L1.SCREEN = 15 OR L1.SCREEN = 11) AND (L2.screen = 15 OR L2.screen = 11)

SELECT DISTINCT PC.model
FROM PC JOIN PRODUCT ON PC.model = PRODUCT.model JOIN (SELECT MAKER, MIN(LAPTOP.price) AS min_price FROM LAPTOP JOIN PRODUCT ON LAPTOP.model = PRODUCT.model GROUP BY maker) AS T1 ON PRODUCT.maker = T1.maker
WHERE PC.price < T1.min_price

SELECT DISTINCT T2.model, T2.avg_pr
FROM (SELECT PC.model, AVG(PC.price) AS avg_pr
     FROM PC JOIN PRODUCT ON PC.model = PRODUCT.model
     GROUP BY PC.MODEL) AS T2 JOIN PRODUCT ON T2.model = PRODUCT.model JOIN 
	 (SELECT MAKER, MIN(LAPTOP.price) AS min_price 
	 FROM LAPTOP JOIN PRODUCT ON LAPTOP.model = PRODUCT.model 
	 GROUP BY maker) AS T1 ON PRODUCT.maker = T1.maker
WHERE T2.avg_pr < T1.min_price

--4TH 

SELECT P1.code, PRODUCT.maker, COUNT(P2.code) AS NUM_HIGHER
FROM PC AS P1 JOIN PC AS P2 ON P1.PRICE <= P2.PRICE JOIN PRODUCT ON P1.model = PRODUCT.model AND P2.model = PRODUCT.model
GROUP BY P1.code, PRODUCT.maker






